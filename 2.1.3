#include <stdio.h>
            p->remaining_time -= run_time;
            current_time = next_arrival;
            enqueue(&queues[q_index], p);
            p->last_ready_time = current_time;
        } else {
            current_time += time_slice;
            p->remaining_time -= time_slice;

            if (p->remaining_time == 0) {
                p->completion_time = current_time;
            } else {
                if (q_index < NUM_QUEUES - 1) {
                    enqueue(&queues[q_index + 1], p);
                } else {
                    enqueue(&queues[q_index], p);
                }
                p->last_ready_time = current_time;
            }
        }
    }

    float total_waiting = 0, total_turnaround = 0;
    printf("PID\tArrival\tBurst\tWaiting\tCompletion\tTurnaround\n");
    for (int i = 0; i < n; i++) {
        int turnaround = processes[i].completion_time - processes[i].arrival_time;
        total_waiting += processes[i].waiting_time;
        total_turnaround += turnaround;
        printf("%d\t%d\t%d\t%d\t%d\t%d\n",
               processes[i].pid,
               processes[i].arrival_time,
               processes[i].burst_time,
               processes[i].waiting_time,
               processes[i].completion_time,
               turnaround);
    }

    printf("Average Waiting Time: %.2f\n", total_waiting / n);
    printf("Average Turnaround Time: %.2f\n", total_turnaround / n);

    free(processes);
    return 0;
}
